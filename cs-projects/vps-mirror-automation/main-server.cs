// Thomas Hoerger - Copyright Â© 2023 VPS Mirror Automation
using System;
using System.Collections.Generic;
using System.Net;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;

string mirrorServerAddress = "192.168.1.100"; // Replace with the actual address
int mirrorServerPort = 12345; // Replace with the actual port

class Program
{
    // Shared lock object for synchronizing access to sharedData
    static object sharedDataLock = new object();

    // Shared data storage for events generated by main server threads
    static List<string> sharedData = new List<string>();

    static void Main()
    {
        // Feature 1: Main server running at least 4 threads
        for (int i = 0; i < 4; i++)
        {
            // Create and start a new thread for the main server logic
            Thread thread = new Thread(MainServerThread);
            thread.Start();
        }

        // Feature 4: Automation script for mirror backup
        // Timer to trigger mirror backup every 10 minutes
        Timer backupTimer = new Timer(MirrorBackup, null, TimeSpan.Zero, TimeSpan.FromMinutes(10));

        // Start mirror server listener to handle incoming data from the main server
        StartMirrorServer(mirrorServerAddress, mirrorServerPort);

        // Wait for user input to exit the program
        Console.ReadLine();
    }

    // Logic for each main server thread
    static void MainServerThread()
    {
        while (true)
        {
            // Simulate generating some data or events on the main server
            string eventData = GenerateEventData();

            // Feature 2: Shared critical session with shared data
            lock (sharedDataLock)
            {
                // Add generated event data to the shared data list
                sharedData.Add(eventData);
            }

            // Feature 3: Mirror keeping up with events and data
            MirrorServerProcess(eventData);

            // Simulate some processing time before the next iteration
            Thread.Sleep(1000);
        }
    }

    // Logic for mirror server to process incoming data
    static void MirrorServerProcess(string eventData)
    {
        // Simulate processing on the mirror server
        Console.WriteLine($"Mirror server processing: {eventData}");

        // Send data to mirror server for further processing
        SendMessageToMirror(eventData, mirrorServerAddress, mirrorServerPort);
    }

    // Send data to the mirror server using TCP
    static void SendMessageToMirror(string message, string mirrorServerAddress, int mirrorServerPort)
    {
        using (TcpClient client = new TcpClient(mirrorServerAddress, mirrorServerPort))
        using (NetworkStream stream = client.GetStream())
        {
            byte[] data = Encoding.UTF8.GetBytes(message);
            stream.Write(data, 0, data.Length);
        }
    }

    // Start mirror server to listen for incoming connections
    static void StartMirrorServer(string mirrorServerAddress, int mirrorServerPort)
    {
        // Create a TCP listener on IP address and port
        TcpListener listener = new TcpListener(mirrorServerAddress, mirrorServerPort);
        listener.Start();

        Console.WriteLine("Mirror server listening on port...");

        while (true)
        {
            // Accept incoming TCP client connections
            TcpClient client = listener.AcceptTcpClient();

            // Queue the connection for processing in a separate thread
            ThreadPool.QueueUserWorkItem(HandleMirrorClient, client);
        }
    }

    // Handle a mirror client connection (separate thread)
    static void HandleMirrorClient(object state)
    {
        TcpClient client = (TcpClient)state;

        using (NetworkStream stream = client.GetStream())
        {
            // Read incoming data from the network stream
            byte[] buffer = new byte[1024];
            int bytesRead = stream.Read(buffer, 0, buffer.Length);
            string receivedData = Encoding.UTF8.GetString(buffer, 0, bytesRead);

            // Process and display received data
            Console.WriteLine($"Mirror server received data: {receivedData}");
        }

        // Close the client connection
        client.Close();
    }

    // Mirror backup logic with retention policy
    static void MirrorBackup(object state)
    {
        // Feature 4: Define and implement retention policy for mirror backup
        Console.WriteLine("Mirror backup process triggered...");

        lock (sharedDataLock)
        {
            // Simulate creating a backup of shared data
            List<string> backupData = new List<string>(sharedData);

            // backup logic here
            string backupFileName = $"mirror_backup_{DateTime.Now:yyyyMMdd_HHmmss}.txt";
            string backupFilePath = Path.Combine(Environment.CurrentDirectory, backupFileName);

            try
            {
                // Use StreamWriter to write each event data to the backup file
                using (StreamWriter writer = new StreamWriter(backupFilePath))
                {
                    foreach (string eventData in backupData)
                    {
                        writer.WriteLine(eventData);
                    }
                }

                Console.WriteLine($"Mirror backup completed. Backup saved to: {backupFilePath}");
            }
            catch (Exception ex)
            {
                // Handle exceptions during backup and display an error message
                Console.WriteLine($"Error during backup: {ex.Message}");
            }
        }
    }

    // Simulate generating events or data
    static string GenerateEventData()
    {
        return $"Event_{DateTime.Now.Ticks}";
    }
}
